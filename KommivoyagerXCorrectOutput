import numpy as np
from sklearn.model_selection import ParameterGrid
from pydantic import BaseModel
from typing import List, Tuple


class Graph(BaseModel):
    nodes: List[int]
    edges: List[Tuple[int, int]]


class PathResult(BaseModel):
    path: List[int]
    total_distance: float

class AntColonyOptimization:
    def __init__(self, graph: Graph, num_ants: int, num_iterations: int, alpha: float = 1, beta: float = 5,
                 evaporation: float = 0.5, quantity: float = 100):
        self.graph = graph
        self.num_ants = num_ants  # Количество муравьёв
        self.num_iterations = num_iterations  # Количество итераций
        self.alpha = alpha  # Параметр, определяющий влияние феромона
        self.beta = beta  # Параметр, определяющий влияние видимости (1/расстояние)
        self.evaporation = evaporation  # Коэффициент испарения феромона
        self.quantity = quantity  # Количество феромона, выделяемого муравьём
        self.num_cities = len(graph.nodes)  # Количество узлов (городов) в графе
        self.distance_matrix = self.create_distance_matrix()  # Матрица расстояний между узлами
        self.pheromone = np.where(self.distance_matrix != np.inf, 1.0, 0.01)  # Матрица феромонов
        self.precedence = 1 / (self.distance_matrix + np.diag([np.inf] * self.num_cities))  # Матрица видимости

    def create_distance_matrix(self):
        # Создание матрицы расстояний между узлами
        matrix = np.full((self.num_cities, self.num_cities), np.inf)
        for i, j in self.graph.edges:
            matrix[i-1, j-1] = 1  # Устанавливаем длину рёбер равной 1
            matrix[j-1, i-1] = 1  # Граф неориентированный, поэтому симметричный
        np.fill_diagonal(matrix, 0)  # Диагональные элементы (расстояние до самого себя) равны 0
        return matrix

    def run(self):
        best_route = None
        best_distance = float('inf')

        for _ in range(self.num_iterations):
            all_routes = []
            for _ in range(self.num_ants):
                route = [np.random.randint(self.num_cities)]  # Начальный узел выбирается случайно
                unvisited_cities = set(range(self.num_cities))
                unvisited_cities.remove(route[0])  # Удаляем начальный узел из непосещённых

                while unvisited_cities:
                    current_city = route[-1]
                    probabilities = []
                    for city in unvisited_cities:
                        if self.distance_matrix[current_city, city] != np.inf:
                            # Вычисление вероятности выбора следующего узла
                            prob = (self.pheromone[current_city, city] ** self.alpha) * \
                                   (self.precedence[current_city, city] ** self.beta)
                            probabilities.append((city, prob))

                    if not probabilities:
                        break  # Если нет доступных путей, завершаем маршрут

                    probabilities = np.array(probabilities, dtype=[('city', int), ('prob', float)])
                    prob_sum = np.sum(probabilities['prob'])
                    if prob_sum > 0:
                        probabilities['prob'] /= prob_sum  # Нормализация вероятностей
                        next_city = np.random.choice(probabilities['city'], p=probabilities['prob'])
                    else:
                        next_city = probabilities['city'][0]  # Если все вероятности нулевые, выбираем первый доступный

                    route.append(next_city)
                    unvisited_cities.remove(next_city)

                # Проверяем, что все города посещены (без возврата)
                if not unvisited_cities and len(set(route)) == self.num_cities:
                    route_distance = len(route)  # Длина маршрута равна числу узлов
                    all_routes.append(route)
                    if route_distance < best_distance:
                        best_distance = route_distance
                        best_route = route

            if all_routes:
                self.pheromone *= (1 - self.evaporation)  # Испарение феромона
                for route in all_routes:
                    for i in range(len(route) - 1):
                        self.pheromone[route[i], route[i + 1]] += self.quantity / best_distance  # Обновление феромона

        return best_route, best_distance if best_route else (None, float('inf'))

class GridSearchACO:
    def __init__(self, graph: Graph):
        self.graph = graph
        self.best_params = None
        self.best_distance = float('inf')
        self.best_route = None

    def search(self, param_grid):
        for params in ParameterGrid(param_grid):
            aco = AntColonyOptimization(
                graph=self.graph,
                num_ants=params['num_ants'],
                num_iterations=params['num_iterations'],
                alpha=params['alpha'],
                beta=params['beta'],
                evaporation=params['evaporation'],
                quantity=params['quantity']
            )
            route, distance = aco.run()

            if route is not None and distance < self.best_distance:
                self.best_distance = distance
                self.best_params = params
                self.best_route = route

        return self.best_params, self.best_distance, self.best_route

# Пример использования
graph_data = {
    "graph": {
        "nodes": [1, 2, 3, 4],
        "edges": [[1, 2], [2, 3], [4, 2], [1, 3]]
    }
}

graph = Graph(**graph_data["graph"])

param_grid = {
    'alpha': [2, 3],
    'beta': [2, 5],
    'evaporation': [0.1, 0.5],
    'quantity': [50, 100],
    'num_ants': [10, 20],
    'num_iterations': [50]
}

grid_search = GridSearchACO(graph)
best_params, best_distance, best_route = grid_search.search(param_grid)

if best_route:
    best_route_nodes = [graph.nodes[i] for i in best_route]
    path_result = PathResult(path=best_route_nodes, total_distance=best_distance)
    print(path_result.model_dump_json())
else:
    print("Не удалось найти гамильтонов путь")
